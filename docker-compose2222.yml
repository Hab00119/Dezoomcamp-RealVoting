# docker-compose.yml
version: '3.8'

services:
  data-generator:
    build:
      context: .
      dockerfile: docker/Dockerfile.generator
    volumes:
      - ./data_generator:/app/data_generator
    environment:
      - VOTERS_COUNT=1000
      - VOTES_PER_MINUTE=100
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - voting-network
    depends_on:
      - kafka
    command: python -m data_generator.voter_generator

  vote-simulator:
    build:
      context: .
      dockerfile: docker/Dockerfile.generator
    volumes:
      - ./data_generator:/app/data_generator
    environment:
      - VOTES_PER_MINUTE=100
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - voting-network
    depends_on:
      - kafka
      - data-generator
    command: python -m data_generator.real_vote_simulator

  # Kafka infrastructure
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms256M"
    networks:
      - voting-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 5s
      timeout: 10s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,HOST://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "votes:4:1,voters:1:1"
    networks:
      - voting-network
    depends_on:
      - zookeeper

  # DLT pipeline for PostgreSQL ingestion
  dlt-pipeline-postgres:
    build:
      context: .
      dockerfile: docker/Dockerfile.ingestion
    volumes:
      - ./ingestion:/app/ingestion
      - ~/.dlt:/root/.dlt
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - STORAGE_PREFERENCE=POSTGRES
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=voting_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - BATCH_SIZE=10
      - MAX_BATCH_INTERVAL_SECONDS=100
      - INGEST_VOTERS=true
      - INGEST_VOTES=true
    networks:
      - voting-network
    depends_on:
      - kafka
      - postgres
    command: python ingestion/dlt_pipeline/real_dlt.py
    profiles:
      - postgres

  # DLT pipeline for BigQuery ingestion
  dlt-pipeline-bigquery:
    build:
      context: .
      dockerfile: docker/Dockerfile.ingestion
    volumes:
      - ./ingestion:/app/ingestion
      - ~/.dlt:/root/.dlt
      - ${GCP_CREDENTIALS_PATH:-./dprof-dezoomfinal-b4d188529d18.json}:/app/dprof-dezoomfinal-b4d188529d18.json:ro
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - STORAGE_PREFERENCE=GCP
      - GCP_PROJECT_ID=${GCP_PROJECT_ID}
      - GCP_DATASET=voting_data
      - GCP_CREDENTIALS_PATH=/app/dprof-dezoomfinal-b4d188529d18.json
      - BATCH_SIZE=10
      - MAX_BATCH_INTERVAL_SECONDS=100
      - INGEST_VOTERS=true
      - INGEST_VOTES=true
    networks:
      - voting-network
    depends_on:
      - kafka
    command: python ingestion/dlt_pipeline/real_dlt.py
    profiles:
      - bigquery
      

  postgres:
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: "voting_db,kestra"
      POSTGRES_KESTRA_USER: kestra
      POSTGRES_KESTRA_PASSWORD: k3str4
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres-init.sh:/docker-entrypoint-initdb.d/postgres-init.sh
    networks:
      - voting-network
    profiles:
      - postgres

  # pgweb - PostgreSQL web interface
  pgweb:
    image: sosedoff/pgweb
    ports:
      - "8085:8081"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/voting_db?sslmode=disable
    networks:
      - voting-network
    depends_on:
      - postgres
    restart: unless-stopped
    profiles:
      - postgres

volumes:
  postgres-data:

networks:
  voting-network:
    driver: bridge